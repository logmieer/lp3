GROUP - A
Assignment No: 2
====================================================================
Title:-
Implement Huffman encoding using a greedy method
=====================================================================
Objective:-
-To learn about Huffman encoding
-To understand greedy method
=====================================================================
Theory:-
*	Huffman coding is a lossless data compression algorithm. The idea is to assign variable-
length codes to input characters; lengths of the assigned codes are based on the frequencies 
of corresponding characters. The most frequent character gets the smallest code and the least 
frequent character gets the largest code.
*	The variable-length codes assigned to input characters are Prefix Codes, means the codes (bit 
sequences) are assigned in such a way that the code assigned to one character is not the 
prefix of code assigned to any other character. This is how Huffman Coding makes sure that 
there is no ambiguity when decoding the generated bitstream. 
*	For example of prefix codes with a counter example, there be four characters a, b, c and d, 
and their corresponding variable length codes be 00, 01, 0 and 1. This coding leads to 
ambiguity because code assigned to c is the prefix of codes assigned to a and b. If the 
compressed bit stream is 0001, the de-compressed output may be "cccd" or "ccb" or "acd" or 
"ab".
*	There are mainly two major parts in Huffman Coding
1.	Build a Huffman Tree from input characters.
2.	Traverse the Huffman Tree and assign codes to characters.

*	How Huffman Coding works?
Input is an array of unique characters along with their frequency of occurrences and output is 
Huffman Tree.
?	Create a leaf node for each unique character and build a min heap of all leaf nodes 
(Min Heap is used as a priority queue. The value of frequency field is used to compare 
two nodes in min heap. Initially, the least frequent character is at root)
?	Extract two nodes with the minimum frequency from the min heap.
?	Create a new internal node with a frequency equal to the sum of the two nodes 
frequencies. Make the first extracted node as its left child and the other extracted node 
as its right child. Add this node to the min heap.
?	Repeat steps 2 and 3 until the heap contains only one node. The remaining node is the 
root node and the tree is complete.

*	Practice problem based on job sequencing with deadline
?	Problem : - Jobs are given with their deadline and associated profits, 
Character
Frequency
a
5
b
9
c
12
d
13
e
16
f
45

?	Step 1: Build a min heap that contains 6 nodes where each node represents root of a tree 
with single node.
?	Step 2 Extract two minimum frequency nodes from min heap. Add a new internal node 
with frequency 5 + 9 = 14.
 
	Now min heap contains 5 nodes where 4 nodes are roots of trees with single element 
	each, and one heap node is root of tree with 3 elements.
Character
Frequency
c
12
d
13
internal node
14
e
16
f
45
?	Step 3: Extract two minimum frequency nodes from heap. Add a new internal node with 
frequency 12 + 13 = 25
 
	Now min heap contains 4 nodes where 2 nodes are roots of trees with single element 
	each, and two heap nodes are root of tree with more than one nodes.
Character
Frequency
internal node
14
e
16
internal node
25
f
45
?	Step 4: Extract two minimum frequency nodes. Add a new internal node with frequency 
14 + 16 = 30
 
Now min heap contains 3 nodes.
Character
Frequency
internal node
25
internal node
25
f
45
?	Step 5: Extract two minimum frequency nodes. Add a new internal node with frequency 
25 + 30 = 55
 
Now min heap contains 2 nodes.
Character
Frequency
f
45
internal node
55
?	Step 6: Extract two minimum frequency nodes. Add a new internal node with frequency 
45 + 55 = 100
 
Now min heap contains only one node,
Character
Frequency
internal node
100
Since the heap contains only one node, the last step is to print code from human tree:
?	Step 7: Step to print codes from Huffman tree:
Traverse the tree formed starting from the root. Maintain an auxiliary array. While 
moving to the left child, write 0 to the array. While moving to the right child, write 1 to 
the array. Print the array when a leaf node is encountered.
 
The Huffman code is as follows:
Character
Code Word
f
0
c
100
d
101
a
1100
b
1101
e
111

Algorithm: Job-Sequencing-With-Deadline (D, J, n, k) 
D(0) := J(0) := 0 
k := 1 
J(1) := 1   // means first job is selected 
for i = 2 ... n do 
   r := k 
   while D(J(r)) > D(i) and D(J(r)) ? r do 
      r := r - 1 
   if D(J(r)) = D(i) and D(i) > r then 
      for l = k ... r + 1 by -1 do 
         J(l + 1) := J(l) 
         J(r + 1) := i 
         k := k + 1

*	Time Complexity and Space Complexity of Job sequencing with deadline
O(nlogn) where n is the number of unique characters. If there are n nodes, extractMin() is called 
2*(n - 1) times. extractMin() takes O(logn) time as it calls minHeapify(). So, overall complexity 
is O(nlogn).


=====================================================================
Conclusion:-
Thus we have studied to how Huffman coding using greedy method works. The use of greedy 
method is solving a problem by selecting the best option available at the moment.
=====================================================================
Laboratory Practice -III
Prof. P. N. Pathak

4	Department of Computer Engineering 	LoGMIEER, Nashik
