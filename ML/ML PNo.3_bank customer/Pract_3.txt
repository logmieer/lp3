#!/usr/bin/env python
# coding: utf-8

# Import necessary libraries
import pandas as pd
import seaborn as sns

# Read data from the "Churn_Modelling.csv" file into a DataFrame
df = pd.read_csv('Churn_Modelling.csv')

# Check the shape of the DataFrame
df.shape

# Get the column names of the DataFrame
df.columns

# Display the first few rows of the DataFrame
df.head()

# Define input (x) and output (y) data
x = df[['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary']]
y = df['Exited']

# Visualize class distribution using a countplot
sns.countplot(x=y)

# Get class counts for the output data
y.value_counts()

# Install the imbalanced-learn library
!pip install imbalanced-learn

# Import the RandomOverSampler class from imbalanced-learn
from imblearn.over_sampling import RandomOverSampler

# Create a RandomOverSampler instance with a random state
ros = RandomOverSampler(random_state=0)

# Perform oversampling on the input and output data
x_res, y_res = ros.fit_resample(x, y)

# Display class counts after oversampling
y_res.value_counts()

# Import the StandardScaler from scikit-learn for feature scaling
from sklearn.preprocessing import StandardScaler

# Create a StandardScaler instance
scaler = StandardScaler()

# Standardize the input data
x_scaled = scaler.fit_transform(x_res)

# Perform train-test split for cross-validation
from sklearn.model_selection import train_test_split

# Split the data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x_scaled, y_res, random_state=0, test_size=0.25)

# Import the MLPClassifier (Multi-layer Perceptron) from scikit-learn
from sklearn.neural_network import MLPClassifier

# Create an MLPClassifier model with specific configuration
ann = MLPClassifier(hidden_layer_sizes=(100, 100, 100), random_state=0, max_iter=100, activation='relu')

# Suppress warnings
import warnings
warnings.filterwarnings("ignore")

# Train the MLPClassifier model on the training data
ann.fit(x_train, y_train)

# Predict on the test data
y_pred = ann.predict(x_test)

# Import evaluation metrics
from sklearn.metrics import ConfusionMatrixDisplay, classification_report, accuracy_score

# Display the confusion matrix
ConfusionMatrixDisplay.from_predictions(y_test, y_pred)

# Display class counts in the test data
y_test.value_counts()

# Calculate the accuracy of the model
accuracy_score(y_test, y_pred)

# Print a classification report
print(classification_report(y_test, y_pred))
